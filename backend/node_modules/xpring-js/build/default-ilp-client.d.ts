import { BigInteger } from 'big-integer';
import { IlpClientDecorator } from './ilp-client-decorator';
import { IlpNetworkClient } from './ilp-network-client';
declare class DefaultIlpClient implements IlpClientDecorator {
    private readonly networkClient;
    /**
     * Create a new DefaultIlpClient.
     *
     * The DefaultIlpClient will use gRPC to communicate with the given endpoint.
     *
     * @param grpcURL The URL of the gRPC instance to connect to.
     * @param forceWeb If `true`, then we will use the gRPC-Web client even when on Node. Defaults to false.
     * This is mainly for testing and in the future will be removed when we have browser testing.
     */
    static defaultIlpClientWithEndpoint(grpcURL: string, forceWeb?: boolean): DefaultIlpClient;
    /**
     * Create a new DefaultIlpClient with a custom network client implementation.
     *
     * In general, clients should prefer to call `defaultIlpClientWithEndpoint`. This constructor is provided to improve
     * testability of this class.
     *
     * @param networkClient A network client which will manage remote RPCs to Hermes (the ILP proxy).
     */
    constructor(networkClient: IlpNetworkClient);
    /**
     * Retrieve the balance for the given address.
     *
     * @param address The ILP address to retrieve a balance for.
     * @returns A `BigInteger` representing the number of drops of XRP in the account.
     */
    getBalance(address: string): Promise<BigInteger>;
    /**
     * Send the given amount of XRP from the source wallet to the destination address.
     *
     * @param amount A `BigInteger`, number or numeric string representing the number of drops to send.
     * @param paymentPointer the payment pointer to receive funds
     * @param sender the ILP account sending the funds
     * @returns A promise which resolves to a `BigInteger` of the amount that was delivered to the recipient
     */
    send(amount: BigInteger | number | string, paymentPointer: string, sender: string): Promise<BigInteger>;
}
export default DefaultIlpClient;
