"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const big_integer_1 = __importDefault(require("big-integer"));
const utils_1 = __importDefault(require("./utils"));
const grpc_ilp_network_client_1 = __importDefault(require("./grpc-ilp-network-client"));
const grpc_ilp_network_client_web_1 = __importDefault(require("./grpc-ilp-network-client.web"));
class DefaultIlpClient {
    /**
     * Create a new DefaultIlpClient with a custom network client implementation.
     *
     * In general, clients should prefer to call `defaultIlpClientWithEndpoint`. This constructor is provided to improve
     * testability of this class.
     *
     * @param networkClient A network client which will manage remote RPCs to Hermes (the ILP proxy).
     */
    constructor(networkClient) {
        this.networkClient = networkClient;
    }
    /**
     * Create a new DefaultIlpClient.
     *
     * The DefaultIlpClient will use gRPC to communicate with the given endpoint.
     *
     * @param grpcURL The URL of the gRPC instance to connect to.
     * @param forceWeb If `true`, then we will use the gRPC-Web client even when on Node. Defaults to false.
     * This is mainly for testing and in the future will be removed when we have browser testing.
     */
    static defaultIlpClientWithEndpoint(grpcURL, forceWeb = false) {
        return utils_1.default() && !forceWeb
            ? new DefaultIlpClient(new grpc_ilp_network_client_1.default(grpcURL))
            : new DefaultIlpClient(new grpc_ilp_network_client_web_1.default(grpcURL));
    }
    /**
     * Retrieve the balance for the given address.
     *
     * @param address The ILP address to retrieve a balance for.
     * @returns A `BigInteger` representing the number of drops of XRP in the account.
     */
    async getBalance(address) {
        const request = this.networkClient.GetBalanceRequest();
        request.setAccountId(address);
        const response = await this.networkClient.getBalance(request);
        return big_integer_1.default(response.getNetBalance());
    }
    /**
     * Send the given amount of XRP from the source wallet to the destination address.
     *
     * @param amount A `BigInteger`, number or numeric string representing the number of drops to send.
     * @param paymentPointer the payment pointer to receive funds
     * @param sender the ILP account sending the funds
     * @returns A promise which resolves to a `BigInteger` of the amount that was delivered to the recipient
     */
    async send(amount, paymentPointer, sender) {
        const request = this.networkClient.SendPaymentRequest();
        request.setDestinationPaymentPointer(paymentPointer);
        request.setAmount(Number(amount));
        request.setAccountId(sender);
        const response = await this.networkClient.send(request);
        return big_integer_1.default(response.getAmountDelivered());
    }
}
exports.default = DefaultIlpClient;
//# sourceMappingURL=default-ilp-client.js.map